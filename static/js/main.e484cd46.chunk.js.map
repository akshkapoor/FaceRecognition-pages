{"version":3,"sources":["Components/Navigation/Navigation.js","Components/Logo/Logo.js","Components/Rank/Rank.js","Components/imagelinkform/imagelinkform.js","Components/facerecognition/facerecognition.js","Components/signin/signin.js","Components/register/register.js","App.js","serviceWorker.js","index.js","Components/Logo/logo.png"],"names":["Navigation","isSignedIn","onRouteChange","style","display","justifyContent","onClick","className","Logo","options","max","height","width","alt","src","logo","Rank","rank","user","Imagelinkform","getUrl","onButtonSubmit","type","placeholder","onChange","FaceRecognition","box","imageUrl","id","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Signin","props","onSignIn","onEmailChange","event","setState","email","target","value","onPasswordChange","password","state","this","htmlFor","name","React","Component","Register","onNameChange","namer","emailr","passwordr","onRegister","app","require","App","apiKey","particlesOptions","particles","number","density","enable","value_area","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","url","input","models","predict","then","response","catch","err","console","log","fetch","method","headers","body","JSON","stringify","currentemail","clone","json","fetchinfo_entries","route","fetchinfo_user","currentuser","entries","params","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.e484cd46.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navigation=({isSignedIn,onRouteChange})=>{\r\n    if(isSignedIn){return(\r\n        \r\n        <nav style={{display:'flex',justifyContent:'flex-end'}}>\r\n            <p onClick={()=>onRouteChange('signout')}\r\n            className='f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n        </nav>\r\n    );}\r\n    else{\r\n            return(\r\n                <nav style={{display:'flex',justifyContent:'flex-end'}}>\r\n                    <p onClick={()=>onRouteChange('signin')}\r\n                    className='f3 link dim black underline pa3 pointer'>Sign In</p>\r\n                    <p onClick={()=>onRouteChange('register')}\r\n                    className='f3 link dim black underline pa3 pointer'>Register</p>\r\n                </nav>\r\n            );\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport './logo.css';\r\nimport logo from './logo.png'\r\n\r\nconst Logo=()=>{\r\n    return(\r\n            <div>\r\n                <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 25 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner\">\r\n                <div className=\"Tilt-inner pa3 tc\">\r\n                <img alt='brain' src={logo}></img>\r\n                </div>\r\n                </div>\r\n                </Tilt>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\n\r\nconst Rank=({rank,user})=>{\r\n    return(\r\n        <div>\r\n            <div className='white f3 center'>\r\n                {/*console.log(user)*/}\r\n                {user+', your current detections are ...'}\r\n            </div>\r\n            <div className='white f1 center'>\r\n                {rank}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Rank;","import React from 'react';\r\nimport './imagelinkform.css';\r\n\r\nconst Imagelinkform=({getUrl,onButtonSubmit})=>{\r\n    return(\r\n        <div>\r\n            <p className='f3 center'>\r\n                {'This App will detect face in your picture. Fill in link to your image and click on Detect!'}\r\n            </p>\r\n            <div className='center'>\r\n                <div className='form center pa4 br3 shadow-5'>\r\n                <input className='f4 pa2 w-70 center' \r\n                type='text' placeholder='URL'\r\n                onChange={getUrl}\r\n                ></input>\r\n                <button\r\n                className='w-30 center grow f4 link ph3 pv2 dib white bg-light-purple'\r\n                onClick={onButtonSubmit}\r\n                >Detect</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Imagelinkform;","import React from 'react';\r\nimport './facerecognition.css';\r\n\r\nconst FaceRecognition=({box,imageUrl})=>{\r\n    return(\r\n        <div className='center ma'>\r\n            <div className='absolute mt2'>\r\n            <img id='inputimage' src={imageUrl} alt={''} width='500px' height='auto'></img>\r\n            <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\n\r\nclass Signin extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            email:'',\r\n            password:'',\r\n            rank:0\r\n        }\r\n    }\r\n\r\n    onSignIn=()=>this.props.onRouteChange('home');\r\n\r\n    onEmailChange=(event)=>{\r\n        //console.log(event.target.value)\r\n        this.setState({email:event.target.value})\r\n      }\r\n    \r\n    onPasswordChange=(event)=>{\r\n        this.setState({password:event.target.value})\r\n        //console.log(this.state.password)\r\n      }\r\n\r\n\r\n\r\n    render(){\r\n        const {onRouteChange}=this.props;\r\n        return(\r\n            <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n            <main className=\"pa4 black-80\">\r\n            <div className=\"measure\">\r\n                <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n                <div className=\"mt3\">\r\n                    <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                    <input\r\n                    onChange={this.onEmailChange}\r\n                    className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\r\n                </div>\r\n                <div className=\"mv3\">\r\n                    <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                    <input\r\n                    onChange={this.onPasswordChange}\r\n                    className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\r\n                </div>\r\n                </fieldset>\r\n                <div className=\"\">\r\n                <input onClick={this.onSignIn}\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Sign in\" />\r\n                </div>\r\n                <div className=\"lh-copy mt3\">\r\n                <p onClick={()=>onRouteChange('register')}\r\n                className=\"f6 link dim black db pointer\">Register</p>\r\n                </div>\r\n            </div>\r\n            </main>\r\n            </article>\r\n    \r\n        );\r\n    }\r\n};\r\n\r\nexport default Signin;","import React from 'react';\r\n\r\nclass Register extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            namer:'',\r\n            emailr:'',\r\n            passwordr:''\r\n        }\r\n    }\r\n\r\n    onNameChange=(event)=>{\r\n        this.setState({namer:event.target.value})\r\n    }\r\n    onEmailChange=(event)=>{\r\n        this.setState({emailr:event.target.value})\r\n    }\r\n    onPasswordChange=(event)=>{\r\n        this.setState({passwordr:event.target.value})\r\n    }\r\n\r\n    onRegister=()=>this.props.onRouteChange('home')\r\n\r\n    render(){\r\n        return(\r\n            <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n            <main className=\"pa4 black-80\">\r\n            <div className=\"measure\">\r\n                <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n                <div className=\"mt3\">\r\n                    <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                    <input onChange={this.onNameChange} \r\n                    className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"name\"  id=\"name\" />\r\n                </div>\r\n                <div className=\"mt3\">\r\n                    <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                    <input onChange={this.onEmailChange}  \r\n                    className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-addressr\" />\r\n                </div>\r\n                <div className=\"mv3\">\r\n                    <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                    <input onChange={this.onPasswordChange} \r\n                    className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"passwordr\" />\r\n                </div>\r\n                </fieldset>\r\n                <div className=\"\">\r\n                <input onClick={this.onRegister}\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Register\" />\r\n                </div>\r\n            </div>\r\n            </main>\r\n            </article>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport Navigation from './Components/Navigation/Navigation';\r\nimport 'tachyons';\r\nimport Logo from './Components/Logo/Logo';\r\nimport './App.css';\r\nimport Rank from './Components/Rank/Rank';\r\nimport Imagelinkform from './Components/imagelinkform/imagelinkform';\r\nimport FaceRecognition from './Components/facerecognition/facerecognition';\r\nimport Signin from './Components/signin/signin';\r\nimport Register from './Components/register/register';\r\nimport Particles from 'react-particles-js';\r\n\r\nconst Clarifai = require('clarifai');\r\n\r\nconst app = new Clarifai.App({\r\n apiKey: 'fe9e5637ab3647bb931a4ff4c273a234'\r\n});\r\n\r\nconst particlesOptions = {\r\n  particles: {\r\n    number: {\r\n      value: 100,\r\n      density: {\r\n        enable: true,\r\n        value_area: 800\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      input:'',\r\n      imageUrl:'',\r\n      box:{},\r\n      route:'signin',\r\n      isSignedIn:false,\r\n      rank:0,\r\n      currentuser:'',\r\n      currentemail:''\r\n    }\r\n  }\r\n\r\n  calculateFaceLocation = (data) => {\r\n    //console.log(data);\r\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    const image = document.getElementById('inputimage');\r\n    const width = Number(image.width);\r\n    const height = Number(image.height);\r\n    return {\r\n      leftCol: clarifaiFace.left_col * width,\r\n      topRow: clarifaiFace.top_row * height,\r\n      rightCol: width - (clarifaiFace.right_col * width),\r\n      bottomRow: height - (clarifaiFace.bottom_row * height)\r\n    }\r\n  }\r\n\r\n  displayFaceBox = (box) => {\r\n    //console.log(box);\r\n    this.setState({box: box});\r\n  }\r\n\r\n  getUrl=(url)=>{\r\n    this.setState({input:url.target.value})\r\n    //console.log(this.state.input)\r\n  };\r\n\r\n  onButtonSubmit=()=>{\r\n    this.setState({imageUrl:this.state.input})\r\n    app.models.predict(\"a403429f2ddf4b49b307e318f00e528b\", this.state.input).then(\r\n    (response) =>{\r\n      this.displayFaceBox(this.calculateFaceLocation(response));\r\n    })\r\n    .catch(err=>console.log(err));\r\n\r\n    fetch('http://localhost:3001/image',{\r\n      method:'put',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n                email: this.state.currentemail,\r\n              })\r\n    })\r\n    .then(response=>response.clone().json())\r\n    .then(data=>{ //console.log(data)\r\n      //this.setState({rank:data})\r\n      this.fetchinfo_entries(data)\r\n    })\r\n    //.catch(console.log(\"Error\"))\r\n\r\n    };\r\n\r\n  onRouteChange=(route)=>{\r\n    if(route==='home'){\r\n      this.setState({isSignedIn:true})\r\n    }else if(route==='signout'){\r\n      this.setState({isSignedIn:false})\r\n    }\r\n    this.setState({route:route})\r\n  }\r\n\r\n  fetchinfo_user=(user,email)=>{\r\n    this.setState({currentuser:user})\r\n    this.setState({currentemail:email})\r\n  }\r\n\r\n  fetchinfo_entries=(entries)=>{\r\n    this.setState({rank:entries})\r\n  }\r\n\r\n  render(){\r\n  return (\r\n    <div className='App'>\r\n      <Particles className='particles'\r\n          params={particlesOptions}\r\n      />\r\n      <Navigation isSignedIn={this.state.isSignedIn} onRouteChange={this.onRouteChange}/>\r\n      {this.state.route==='home'?\r\n      <div>\r\n      <Logo />\r\n      <Rank rank={this.state.rank} user={this.state.currentuser}/>\r\n      <Imagelinkform getUrl={this.getUrl} onButtonSubmit={this.onButtonSubmit}/>\r\n      <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl}/>\r\n      </div>:( this.state.route==='signin'?\r\n      <Signin onRouteChange={this.onRouteChange} fetchinfo_user={this.fetchinfo_user} fetchinfo_entries={this.fetchinfo_entries}\r\n      />:<Register onRouteChange={this.onRouteChange} fetchinfo_user={this.fetchinfo_user} fetchinfo_entries={this.fetchinfo_entries}/>)\r\n\r\n  }</div>\r\n  );\r\n}}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.eff55aa9.png\";"],"sourceRoot":""}